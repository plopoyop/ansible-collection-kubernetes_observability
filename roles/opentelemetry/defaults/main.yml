---
# defaults file for opentelemetry
# @var opentelemetry_enabled
# @var opentelemetry_enabled:type: boolean
# @var opentelemetry_enabled:description: >
# Install Grafana chart
opentelemetry_enabled: true

# @var opentelemetry_namespace
# @var opentelemetry_namespace:type: string
# @var opentelemetry_namespace:description: >
# K8s namespace to install Opentelemetry chart
opentelemetry_namespace: "opentelemetry"

# @var opentelemetry_chart_version
# @var opentelemetry_chart_version:type: string
# @var opentelemetry_chart_version:description: >
# Opentelemetry chart version
opentelemetry_chart_version: 0.6.2

# @var opentelemetry_release_name
# @var opentelemetry_release_name:type: string
# @var opentelemetry_release_name:description: >
# Release name for Opentelemetry
opentelemetry_release_name: "otel-collector"

# @var opentelemetry_cluster_name
# @var opentelemetry_cluster_name:type: string
# @var opentelemetry_cluster_name:description: >
# Cluster name for Opentelemetry
opentelemetry_cluster_name: "{{ ansible_host }}"

# @var opentelemetry_operator_config
# @var opentelemetry_operator_config:type: dict
# @var opentelemetry_operator_config:description: >
# Opentelemetry Operator configuration
# opentelemetry_operator_config:example: >
# opentelemetry_operator_config:
#   manager:
#     collectorImage:
#       repository: otel/opentelemetry-collector-contrib

# @var opentelemetry_default_collector_config_enabled
# @var opentelemetry_default_collector_config_enabled:type: boolean
# @var opentelemetry_default_collector_config_enabled:description: >
# Enable default configuration for all collectors generated by the chart

# @var opentelemetry_default_collector_additionnal_config
# @var opentelemetry_default_collector_additionnal_config:type: dict
# @var opentelemetry_default_collector_additionnal_config:description: >
# Additionnal configuration to apply for all collectors
# @var opentelemetry_default_collector_additionnal_config:example: >
# opentelemetry_default_collector_additionnal_config:
#   targetAllocator:
#     enabled: false

# @var opentelemetry_default_collector_config_receivers
# @var opentelemetry_default_collector_config_receivers:type: dict
# @var opentelemetry_default_collector_config_receivers:description: >
# Opentelemetry receivers to apply to all collectors
# opentelemetry_default_collector_config_receivers:example: >
# opentelemetry_default_collector_config_receivers:
#   otlp:
#     protocols:
#       grpc:
#         endpoint: 0.0.0.0:4317
#       http:
#         endpoint: 0.0.0.0:4318

# @var opentelemetry_default_collector_config_exporters
# @var opentelemetry_default_collector_config_exporters:type: dict
# @var opentelemetry_default_collector_config_exporters:description: >
# Opentelemetry exporters to apply to all collectors
# opentelemetry_default_collector_config_exporters:example: >
# opentelemetry_default_collector_config_exporters:
#   debug: {}

# @var opentelemetry_default_collector_config_processors
# @var opentelemetry_default_collector_config_processors:type: dict
# @var opentelemetry_default_collector_config_processors:description: >
# Opentelemetry processors to apply to all collectors
# opentelemetry_default_collector_config_processors:example: >
# opentelemetry_default_collector_config_processors:
#   batch:
#     send_batch_size: 1000
#     timeout: 1s
#     send_batch_max_size: 1500

# @var opentelemetry_default_collector_config_extensions
# @var opentelemetry_default_collector_config_extensions:type: dict
# @var opentelemetry_default_collector_config_extensions:description: >
# Opentelemetry extensions to apply to all collectors
# opentelemetry_default_collector_config_extensions:example: >
# opentelemetry_default_collector_config_extensions:
#   zpages: {}

# @var opentelemetry_default_collector_config_services
# @var opentelemetry_default_collector_config_services:type: dict
# @var opentelemetry_default_collector_config_services:description: >
# Opentelemetry services to apply to all collectors
# opentelemetry_default_collector_config_services:example: >
# opentelemetry_default_collector_config_services:
#   extensions: [zpages]
#   pipelines:
#     traces:
#       receivers: [otlp]
#       processors: [memory_limiter, batch]
#       exporters: [otlp]#

# @var opentelemetry_collectors_daemon_config
# @var opentelemetry_collectors_daemon_config:type: dict
# @var opentelemetry_collectors_daemon_config:description: >
# Configmap for default daemon collector
# opentelemetry_collectors_daemon_config:example: >
# opentelemetry_collectors_daemon_config:
#   resources:
#     limits:
#       cpu: 400m
#       memory: 7500Mi
#     requests:
#       cpu: 200m
#       memory: 250Mi

# @var opentelemetry_collectors_cluster_config
# @var opentelemetry_collectors_cluster_config:type: dict
# @var opentelemetry_collectors_cluster_config:description: >
# Configmap for default cluster collector
# opentelemetry_collectors_cluster_config:example: >
# opentelemetry_collectors_cluster_config:
#   resources:
#     limits:
#       cpu: 400m
#       memory: 7500Mi
#     requests:
#       cpu: 200m
#       memory: 250Mi

# @var opentelemetry_collectors
# @var opentelemetry_collectors:type: dict
# @var opentelemetry_collectors:description: >
# Additionnal collectors to create
# opentelemetry_collectors:example: >
# opentelemetry_collectors:
#   collectorName:
#     enabled: true
#     name: "example"

# @var opentelemetry_additionnal_config
# @var opentelemetry_additionnal_config:type: dict
# @var opentelemetry_additionnal_config:description: >
# Additionnal values for opentelemetry helm chart
# opentelemetry_additionnal_config:example: >
# opentelemetry_additionnal_config:
#   manager:
#     collectorImage:
#       repository: otel/opentelemetry-collector-contrib


# @var opentelemetry_kubernetes_service_monitors_enabled
# @var opentelemetry_kubernetes_service_monitors_enabled:type: boolean
# @var opentelemetry_kubernetes_service_monitors_enabled:description: >
# Enable presets for kubernetes service monitoring
opentelemetry_kubernetes_service_monitors_enabled: true

# @var opentelemetry_kube_api_enabled
# @var opentelemetry_kube_api_enabled:type: boolean
# @var opentelemetry_kube_api_enabled:description: >
# Component scraping the kube api server
opentelemetry_kube_api_enabled: true

# @var opentelemetry_kubelet_enabled
# @var opentelemetry_kubelet_enabled:type: boolean
# @var opentelemetry_kubelet_enabled:description: >
# Enable component scraping the kubelet and kubelet-hosted cAdvisor
opentelemetry_kubelet_enabled: true

# @var opentelemetry_kube_controller_manager_enabled
# @var opentelemetry_kube_controller_manager_enabled:type: boolean
# @var opentelemetry_kube_controller_manager_enabled:description: >
# Enable component scraping the kube controller manager
opentelemetry_kube_controller_manager_enabled: true

# @var opentelemetry_kube_dns_enabled
# @var opentelemetry_kube_dns_enabled:type: boolean
# @var opentelemetry_kube_dns_enabled:description: >
# Enable component scraping kubeDns. Use either this or coreDns
opentelemetry_kube_dns_enabled: true

# @var opentelemetry_kube_etcd_enabled
# @var opentelemetry_kube_etcd_enabled:type: boolean
# @var opentelemetry_kube_etcd_enabled:description: >
# Enable component scraping etcd
opentelemetry_kube_etcd_enabled: true

# @var opentelemetry_kube_scheduler_enabled
# @var opentelemetry_kube_scheduler_enabled:type: boolean
# @var opentelemetry_kube_scheduler_enabled:description: >
# Enable component scraping kube scheduler
opentelemetry_kube_scheduler_enabled: true

# @var opentelemetry_kube_proxy_enabled
# @var opentelemetry_kube_proxy_enabled:type: boolean
# @var opentelemetry_kube_proxy_enabled:description: >
# Enable component scraping kube proxy
opentelemetry_kube_proxy_enabled: true

# @var opentelemetry_kube_state_metrics_enabled
# @var opentelemetry_kube_state_metrics_enabled:type: boolean
# @var opentelemetry_kube_state_metrics_enabled:description: >
# Controls whether the kube-state-metrics chart should be created
opentelemetry_kube_state_metrics_enabled: true

# @var opentelemetry_node_exporter_enabled
# @var opentelemetry_node_exporter_enabled:type: boolean
# @var opentelemetry_node_exporter_enabled:description: >
# Controls whether the prometheus-node-exporter chart should be created
opentelemetry_node_exporter_enabled: true

# @var opentelemetry_instrumentations
# @var opentelemetry_instrumentations:type: list
# @var opentelemetry_instrumentations:description: >
# Opentelemetry instrumentation custom resources
# @var opentelemetry_instrumentations:example: >
# opentelemetry_instrumentations:
#   - name: "java-auto-instrumentation"
#     endpoint: "http://otel-collector-daemon-collector.otel.svc.cluster.local:4318"
#     propagators:
#       - tracecontext
#       - baggage
#     sampler:
#       type: parentbased_traceidratio
#       argument: "1"
#     state: "present"
#     instrumentations:
#       java:
#         image: ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-java:2.15.0
#         env:
#           - name: OTEL_TRACES_EXPORTER
#             value: "otlp"
#           - name: OTEL_LOGS_EXPORTER
#             value: "otlp"
#           - name: OTEL_METRICS_EXPORTER
#             value: "none"
opentelemetry_instrumentations: []
